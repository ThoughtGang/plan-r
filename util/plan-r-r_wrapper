#!/usr/bin/env ruby
# (c) Copyright 2016 Thoughtgang <http://www.thoughtgang.org>
# runs an instance of R via popen

require 'open3'
require 'io/wait'

module Kernel
  class R

    attr_reader :r_cmd
    def initialize(path_to_r=nil)
      @r_cmd = path_to_r ? path_to_r : `which R`.chomp + ' --vanilla --no-readline --slave'
    end

    def start
      @stdin, @stdout, @stderr, @wait_thr = Open3.popen3(@r_cmd)
      @pid = @wait_thr[:pid]
    end

    def term
      enter_command('q()')
      @stdin.close; @stdout.close; @stderr.close; @wait_thr.value
    end

    def cmd_done_marker
      "$PID$#{@pid}$"
    end

    def enter_command(cmd)
      output = []
      error = []
      @stdin.puts(cmd + "; print(\"#{cmd_done_marker}\")")

      # Wait for response
      while @stdout.wait(10) == false
        sleep 0.10
      end

      while @stdout.ready? || @stderr.ready?
        sleep 0.05  # give R a chance to flush output
        error += @stderr.read(@stderr.nread).split("\n") if @stderr.ready?
        if @stdout.ready?
          @stdout.read(@stdout.nread).split("\n").each do |line|
            output << line if line && (! line.empty?) &&
                              (! line.end_with? "\"#{cmd_done_marker}\"")
          end
        end
      end

      {:stdin => cmd, :stdout => output.join("\n"), :stderr => error.join("\n")}
    end

  end
end

if __FILE__ == $0
  r_proc = Kernel::R.new
  r_proc.start
  r_proc.enter_command('x <- log(2.843432) * pi')
  r_proc.enter_command('x')
  r_proc.enter_command('sqrt(x)')
  r_proc.enter_command('x<-3+2i')
  r_proc.enter_command('x')
  r_proc.enter_command('x<-c(1,3,2,10,5)')
  r_proc.enter_command('x')
  r_proc.enter_command('objects()')
  r_proc.term
end
