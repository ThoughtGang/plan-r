#!/usr/bin/env ruby
# (c) Copyright 2016 Thoughtgang <http://www.thoughtgang.org>
# Utility for adding a Table to a repository

require 'plan-r/application/cli'
require 'plan-r/repo'

require 'plan-r/document/table'

class App < PlanR::CliApplication

  def handle_options(args)
    @options.repo = nil
    @options.dest = nil
    @options.contents = nil
    @options.delim = '|'
    @options.format = :json
    @options.header = false
    @options.datatype = :float

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename $0} [-nst] REPO DEST [DATA]"
      opts.separator "Add a DataTable to a Plan-R repo."
      opts.separator " * REPO is the path to a Plan-R repo dir."
      opts.separator " * DEST is a repo path"
      opts.separator " * DATA is the table content."
      opts.separator "If DATA is not provided, STDIN will be read."
      opts.separator ""
      opts.separator "Options:"
      opts.on( '-d', '--delim c', 'Delimiter used in CSV format [|]' ) { |c|
        @options.delim = c
      }
      opts.on( '-f', '--format str', 'Input format: csv, json [json]',
               'Try "-f help"' ) { |str|
        @options.format = str.downcase.to_sym
      }
      opts.on( '-H', '--header', 'First line of CSV file is header' ) {
        @options.header = true
      }
      opts.on( '--float', 'Force CSV contents to float [default]' ) {
        @options.datatype = :float
      }
      opts.on( '--int', 'Force CSV contents to integer' ) {
        @options.datatype = :int
      }
      opts.on( '--string', 'Force CSV contents to string' ) {
        @options.datatype = :str
      }

      standard_cli_options(opts)
    end
    opts.parse!(args)


    if @options.format == :help
      puts "Supported formats:\n  csv  json"
      exit -1
    end

    @options.repo = args.shift
    @options.dest = args.shift
    @options.contents = args.shift

    if ! @options.repo || ! @options.dest
      $stderr.puts "#{@options.repo ? 'DEST' : 'REPO'} argument required!"
      puts opts
      exit -1
    end
  end

  def start
    repo = PlanR::Application::RepoManager.open(@options.repo)
    raise "Unable to open repo at '#{@options.repo}'" if ! repo

   contents = generate_content(@options.contents || ARGF.read)

    doc_mgr = PlanR::Application::DocumentManager
    props = doc_mgr.default_properties(:table)
    props[:create_app] = 'plan-r-add-table' 
    doc_mgr.new_file(repo, :table, @options.dest, contents, props)

    PlanR::Application::RepoManager.close(repo, true)
  end

  def generate_content(data)
    case @options.format
    when :json
      PlanR::DataTable.from_json(data.chomp)

    when :csv
      blk = block_for_datatype(@options.datatype)
      PlanR::DataTable.from_csv(data, @options.delim, @options.header, &blk)

    else
      raise "Invalid table content type '#{@options.format}'"
    end
  end

  def block_for_datatype(dtype)
    case dtype
    when :int
      Proc.new { |x| Integer(x) }
    when :float
      Proc.new { |x| Float(x) }
    else
      # string is a no-op
      nil
    end
  end
end

if __FILE__ == $0
  App.new(ARGV).exec
end
