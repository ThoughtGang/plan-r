#!/usr/bin/env ruby
# (c) Copyright 2016 Thoughtgang <http://www.thoughtgang.org>
# Utility for updating documents in a Plan R repo

require 'plan-r/application/cli'
require 'plan-r/repo'

class App < PlanR::CliApplication

  def handle_options(args)
    @options.repo = nil
    @options.paths = []
    @options.node_type = nil
    @options.local_only = false
    @options.remote_only = false
    @options.recurse = false
    @options.verbose = true

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename $0} [-d str] REPO [PATH] [...]"
      opts.separator "Update Document in a Plan-R repo from source location."
      opts.separator " * REPO is the path to a Plan-R repo dir."
      opts.separator " * PATH is a file, directory, or URL."
      opts.separator "If no PATH is provided, all documents will be updated."
      opts.separator ""
      opts.separator "Options:"
      opts.on('-q', '--quiet', 'Do not print status messages') {
        @options.verbose = false
      }
      opts.on('-r', '--recurse', 'Update child documents') {
        options.recurse = true
      }
      opts.on( '-t', '--type str', 'Node type [default: first found]',
               'Try "-t help"' ) { |str|
        @options.node_type = str.to_sym
      }
      opts.on('--local', 'Only update local files') {
        @options.local_only = true
        @options.remote_only = false
      }
      opts.on('--remote', 'Only update remote files') {
        @options.remote_only = true
        @options.local_only = false
      }

      standard_cli_options(opts)
    end
    opts.parse!(args)
    if @options.node_type == :help
      puts "Node types:"
      puts available_node_types.join("\n")
      exit -1
    end

    @options.repo = args.shift

    while args.length > 0
      @options.paths << args.shift
    end

    if ! @options.repo
      $stderr.puts "REPO argument required!"
      puts opts
      exit -1
    end
  end

  def start
    repo = PlanR::Application::RepoManager.open(@options.repo)
    raise "Unable to open repo at '#{@options.repo}'" if ! repo

    ctype = arg_to_node_type(@options.node_type)

    @options.paths << '/' if @options.paths.empty?

    @options.paths.each { |path| update_path( repo, path, ctype ) }

    PlanR::Application::RepoManager.close(repo)
  end

  def update_path(repo, path, node_type)
    PlanR::Application::DocumentManager.lookup(repo, path, @options.recurse
                                              ).each do |ctype, p|
      next if (node_type and (! node_type == ctype))

      doc = PlanR::Application::DocumentManager.doc_factory(repo, p, ctype)
      next if (@options.local_only and doc.is_remote?)
      next if (@options.remote_only and (! doc.is_remote?))

      puts 'updating: ' + p if @options.verbose
      PlanR::Application::DocumentManager.refresh_doc(doc)
      # FIXME: display download status?
    end
  end

end

if __FILE__ == $0
  App.new(ARGV).exec
end
