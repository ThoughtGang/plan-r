#!/usr/bin/env ruby
# (c) Copyright 2016 Thoughtgang <http://www.thoughtgang.org>
# Write properties of document in a Plan R repository to STDOUT

require 'plan-r/application/cli'
require 'plan-r/repo'

class App < PlanR::CliApplication
  def self.disable_plugins?; true; end 
  def self.disable_jruby?; true; end 
  def self.disable_vcs?; true; end 

  def handle_options(args)
    @options.repo = nil
    @options.paths = []
    @options.node_type = :document
    @options.props = {}
    @options.datatype = :str

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename $0} [-p name=val] REPO [PATH] [...]"
      opts.separator "Set properties of a Document in a Plan-R repo."
      opts.separator "If PATH is not specified, REPO properties are modified."
      opts.separator "One or more -p arguments can be provided."
      opts.separator "Values are assumed to be Strings unless --json, --int,"
      opts.separator "or --float is specified."
      opts.separator " * REPO is the path to a Plan-R repo dir."
      opts.separator " * PATH is a path in the Repo repo."
      opts.separator ""
      opts.separator "Options:"
      opts.on('-p', '--prop name=val', 'Set property "name" to "value"',
              'Any number of -p arguments may be supplied' ){ |str|
        k,v = str.split('=', 2)
        @options.props[k] = v
      }

      opts.on('-t', '--type str', 'Node type [default: document]',
               'Try "-t help"' ) { |str|
        @options.node_type = str.to_sym
      }
      opts.on('--int', 'Interpret values as integers' ) {
        @options.datatype = :int
      }
      opts.on('--float', 'Interpret values as floats' ) {
        @options.datatype = :float
      }
      opts.on('--json', 'Interpret values as JSON' ) {
        @options.datatype = :json
      }

      standard_cli_options(opts)
    end
    opts.parse!(args)
    if @options.node_type == :help
      puts "Node types:"
      puts available_node_types.join("\n")
      exit -1
    end

    @options.repo = args.shift

    while args.length > 0
      @options.paths << args.shift
    end

    if ! @options.repo
      $stderr.puts "REPO argument required!"
      puts opts
      exit -1
    end
  end

  def start
    repo = PlanR::Application::RepoManager.open(@options.repo)
    raise "Unable to open repo at '#{@options.repo}'" if ! repo

    if (! @options.props.empty?)
      if @options.paths.empty?
        set_repo_properties repo
      else
        @options.paths.each do |path|
          ctype = arg_to_node_type(@options.node_type)
          set_document_properties(repo, path, ctype)
        end
      end
    end

    PlanR::Application::RepoManager.close(repo)
  end

  def set_repo_properties(repo)
    props = repo.repo_properties
    @options.props.each do |k,v|
      props[clean_key(k)] = convert_data(v)
    end
    repo.save
  end

  def set_document_properties(repo, path, ctype)

    PlanR::Application::DocumentManager.lookup(repo, path).each do |arr|
      next if arr[0] != ctype
      # FIXME: update to use Document instead of repo
      props = repo.properties(arr[1], arr[0])
      @options.props.each do |k,v|
        props[clean_key(k)] = convert_data(v)
      end
      repo.set_properties(arr[1], arr[0], props)
    end
  end

  def clean_key(str)
    str.downcase.gsub(/[^[:alnum:]]/, '_').to_sym
  end

  def convert_data(data)
    case @options.datatype
    when :int
      Integer(data)
    when :float
      Float(data)
    when :json
      begin
        JSON.parse(data)
      rescue ::ParserError => e
        $stderr.puts "Could not parse '#{data}': #{e}"
        nil
      end
    else
      data
    end
  end

end

if __FILE__ == $0
  App.new(ARGV).exec
end
